# -*- coding: utf-8 -*-
"""workshop1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y1D5rFF3bNLxm6Pl0NhG6k3ZAexWh_1D
"""



"""4.1 Warming Up Exercise: Basic Vector and Matrix Operation with Numpy.
Problem - 1: Array Creation:
Complete the following Tasks:
1. Initialize an empty array with size 2X2.
2. Initialize an all one array with size 4X2.
3. Return a new array of given shape and type, filled with fill value.{Hint: np.full}
4. Return a new array of zeros with same shape and type as a given array.{Hint: np.zeros like}
5. Return a new array of ones with same shape and type as a given array.{Hint: np.ones like}
6. For an existing list new_list = [1,2,3,4] convert to an numpy array.{Hint: np.array()}
"""

import numpy as np

empty_array = np.empty((2, 2))
print("Empty array (2x2):\n", empty_array)

all_ones_array = np.ones((4, 2))
print("\nAll ones array (4x2):\n", all_ones_array)


fill_value_array = np.full((3, 3), 7)
print("\nArray filled with fill value 7 (3x3):\n", fill_value_array)


reference_array = np.array([[5, 6], [7, 8]])
zeros_like_array = np.zeros_like(reference_array)
print("\nZeros array with same shape and type as reference array:\n", zeros_like_array)


ones_like_array = np.ones_like(reference_array)
print("\nOnes array with same shape and type as reference array:\n", ones_like_array)

new_list = [1, 2, 3, 4]
numpy_array = np.array(new_list)
print("\nConverted numpy array:\n", numpy_array)

"""4.1.1 Problem - 2: Array Manipulation: Numerical Ranges and Array indexing:
Complete the following tasks:
1. Create an array with values ranging from 10 to 49. {Hint:np.arrange()}.
2. Create a 3X3 matrix with values ranging from 0 to 8.
{Hint:look for np.reshape()}
3. Create a 3X3 identity matrix.{Hint:np.eye()}
4. Create a random array of size 30 and find the mean of the array.
{Hint:check for np.random.random() and array.mean() function}
5. Create a 10X10 array with random values and find the minimum and maximum values.
6. Create a zero array of size 10 and replace 5th element with 1.
7. Reverse an array arr = [1,2,0,0,4,0].
8. Create a 2d array with 1 on border and 0 inside.
9. Create a 8X8 matrix and fill it with a checkerboard pattern.
"""

import numpy as np
array_range = np.arange(10, 50)
print("Array with values ranging from 10 to 49:\n", array_range)

matrix_3x3 = np.arange(9).reshape(3, 3)
print("\n3x3 matrix with values from 0 to 8:\n", matrix_3x3)

identity_matrix = np.eye(3)
print("\n3x3 Identity matrix:\n", identity_matrix)

random_array = np.random.random(30)
mean_value = random_array.mean()
print("\nRandom array of size 30:\n", random_array)
print("Mean of the array:", mean_value)

random_matrix_10x10 = np.random.random((10, 10))
min_value = random_matrix_10x10.min()
max_value = random_matrix_10x10.max()
print("\n10x10 random matrix:\n", random_matrix_10x10)
print("Minimum value:", min_value)
print("Maximum value:", max_value)

zero_array = np.zeros(10)
zero_array[4] = 1
print("\nZero array with 5th element replaced by 1:\n", zero_array)

arr = [1, 2, 0, 0, 4, 0]
reversed_array = np.array(arr)[::-1]
print("\nReversed array:\n", reversed_array)

border_array = np.ones((5, 5))
border_array[1:-1, 1:-1] = 0
print("\n2D array with 1 on the border and 0 inside:\n", border_array)

checkerboard_matrix = np.zeros((8, 8), dtype=int)
checkerboard_matrix[1::2, ::2] = 1
checkerboard_matrix[::2, 1::2] = 1
print("\n8x8 Checkerboard pattern:\n", checkerboard_matrix)

"""Problem - 3: Array Operations:
For the following arrays:
x = np.array([[1,2],[3,5]]) and y = np.array([[5,6],[7,8]]);
v = np.array([9,10]) and w = np.array([11,12]);
Complete all the task using numpy:
1. Add the two array.
2. Subtract the two array.
3. Multiply the array with any integers of your choice.
4. Find the square of each element of the array.
5. Find the dot product between: v(and)w ; x(and)v ; x(and)y.
6. Concatenate x(and)y along row and Concatenate v(and)w along column.
{Hint:try np.concatenate() or np.vstack() functions.
7. Concatenate x(and)v; if you get an error, observe and explain why did you get the error?
"""

import numpy as np

x = np.array([[1, 2], [3, 5]])
y = np.array([[5, 6], [7, 8]])
v = np.array([9, 10])
w = np.array([11, 12])

print("Sum of x and y:\n", x + y)

print("\nDifference of x and y:\n", x - y)

print("\nArray x scaled by 3:\n", x * 3)

print("\nSquare of each element in x:\n", x**2)

print("\nDot product of v and w:", np.dot(v, w))
print("Dot product of x and v:\n", np.dot(x, v))
print("Dot product of x and y:\n", np.dot(x, y))

print("\nConcatenate x and y along rows:\n", np.concatenate((x, y), axis=0))
print("Concatenate v and w along columns:\n", np.vstack((v, w)).T)

try:
    print("\nConcatenate x and v:\n", np.concatenate((x, v), axis=0))
except ValueError as e:
    print("\nError during concatenation of x and v:", e)
    print("Explanation: x is 2D (shape (2, 2)) while v is 1D (shape (2,)), which are incompatible.")

"""Problem - 4: Matrix Operations:
• For the following arrays:
A = np.array([[3,4],[7,8]]) and B = np.array([[5,3],[2,1]]);
Prove following with Numpy:
1. Prove A.A−1 = I.
2. Prove AB ̸= BA.
3. Prove (AB)

T = BTAT
.

• Solve the following system of Linear equation using Inverse Methods.

2x − 3y + z = −1
x − y + 2z = −3
3x + y − z = 9

{Hint: First use Numpy array to represent the equation in Matrix form. Then Solve for: AX = B}
• Now: solve the above equation using np.linalg.inv function.{Explore more about ”linalg” function
of Numpy}
"""

import numpy as np

A = np.array([[3, 4], [7, 8]])
B = np.array([[5, 3], [2, 1]])

A_inv = np.linalg.inv(A)
identity_matrix = np.dot(A, A_inv)
print("A * A⁻¹:\n", identity_matrix)
print("Is A * A⁻¹ equal to I? ", np.allclose(identity_matrix, np.eye(2)))

AB = np.dot(A, B)
BA = np.dot(B, A)
print("\nAB:\n", AB)
print("BA:\n", BA)
print("Is AB equal to BA? ", np.array_equal(AB, BA))

#  Prove (AB)ᵀ = BᵀAᵀ
AB_transpose = np.transpose(AB)  # Transpose of AB
BT_AT = np.dot(B.T, A.T)  # Bᵀ * Aᵀ
print("\n(AB)ᵀ:\n", AB_transpose)
print("BᵀAᵀ:\n", BT_AT)
print("Is (AB)ᵀ equal to BᵀAᵀ? ", np.allclose(AB_transpose, BT_AT))

# Solve the system of linear equations using matrix inverse method
# Coefficient matrix and constant matrix
coeff_matrix = np.array([[2, -3, 1], [1, -1, 2], [3, 1, -1]])
const_matrix = np.array([-1, -3, 9])

# Solve for X using AX = B => X = A⁻¹B
coeff_matrix_inv = np.linalg.inv(coeff_matrix)  # Inverse of coefficient matrix
solution = np.dot(coeff_matrix_inv, const_matrix)  # Solve for X
print("\nSolution of the linear equations:\n", solution)

# Verify solution using np.linalg.solve
solution_verify = np.linalg.solve(coeff_matrix, const_matrix)
print("\nSolution using np.linalg.solve:\n", solution_verify)

"""4.2 Experiment: How Fast is Numpy?
In this exercise, you will compare the performance and implementation of operations using plain Python
lists (arrays) and NumPy arrays. Follow the instructions:
1. Element-wise Addition:
• Using Python Lists, perform element-wise addition of two lists of size 1, 000, 000. Measure
and Print the time taken for this operation.
• Using Numpy Arrays, Repeat the calculation and measure and print the time taken for this
operation.
2. Element-wise Multiplication

• Using Python Lists, perform element-wise multiplication of two lists of size 1, 000, 000. Mea-
sure and Print the time taken for this operation.

• Using Numpy Arrays, Repeat the calculation and measure and print the time taken for this
operation.
3. Dot Product
• Using Python Lists, compute the dot product of two lists of size 1, 000, 000. Measure and
Print the time taken for this operation.
• Using Numpy Arrays, Repeat the calculation and measure and print the time taken for this
operation.
4. Matrix Multiplication
• Using Python lists, perform matrix multiplication of two matrices of size 1000x1000. Measure
and print the time taken for this operation.

• Using NumPy arrays, perform matrix multiplication of two matrices of size 1000x1000. Mea-
sure and print the time taken for this operation
"""

import numpy as np
import time

# Helper function to measure time
def measure_time(func, *args, **kwargs):
    start_time = time.time()
    result = func(*args, **kwargs)
    end_time = time.time()
    return result, end_time - start_time

# Task 1: Element-wise Addition
# Using Python Lists
list1 = [i for i in range(1_000_000)]
list2 = [i for i in range(1_000_000)]

def python_addition(list1, list2):
    return [list1[i] + list2[i] for i in range(len(list1))]

_, python_add_time = measure_time(python_addition, list1, list2)

# Using NumPy Arrays
array1 = np.arange(1_000_000)
array2 = np.arange(1_000_000)

_, numpy_add_time = measure_time(np.add, array1, array2)

print(f"Element-wise Addition: Python Lists: {python_add_time:.5f}s, NumPy: {numpy_add_time:.5f}s")

# Task 2: Element-wise Multiplication
# Using Python Lists
def python_multiplication(list1, list2):
    return [list1[i] * list2[i] for i in range(len(list1))]

_, python_mul_time = measure_time(python_multiplication, list1, list2)

# Using NumPy Arrays
_, numpy_mul_time = measure_time(np.multiply, array1, array2)

print(f"Element-wise Multiplication: Python Lists: {python_mul_time:.5f}s, NumPy: {numpy_mul_time:.5f}s")

# Task 3: Dot Product
# Using Python Lists
def python_dot_product(list1, list2):
    return sum(list1[i] * list2[i] for i in range(len(list1)))

_, python_dot_time = measure_time(python_dot_product, list1, list2)

# Using NumPy Arrays
_, numpy_dot_time = measure_time(np.dot, array1, array2)

print(f"Dot Product: Python Lists: {python_dot_time:.5f}s, NumPy: {numpy_dot_time:.5f}s")

# Task 4: Matrix Multiplication
# Using Python Lists
list_matrix1 = [[i for i in range(1000)] for _ in range(1000)]
list_matrix2 = [[i for i in range(1000)] for _ in range(1000)]

def python_matrix_multiplication(mat1, mat2):
    result = [[sum(a * b for a, b in zip(row, col)) for col in zip(*mat2)] for row in mat1]
    return result

_, python_matmul_time = measure_time(python_matrix_multiplication, list_matrix1, list_matrix2)

# Using NumPy Arrays
numpy_matrix1 = np.arange(1000000).reshape(1000, 1000)
numpy_matrix2 = np.arange(1000000).reshape(1000, 1000)

_, numpy_matmul_time = measure_time(np.dot, numpy_matrix1, numpy_matrix2)

print(f"Matrix Multiplication: Python Lists: {python_matmul_time:.5f}s, NumPy: {numpy_matmul_time:.5f}s")